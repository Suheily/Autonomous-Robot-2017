//====================================================================================================================
//   Code that works! :D
//=====================================================================================================================

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "Adafruit_TCS34725softi2c.h"
#include <SoftwareSerial.h>
#include <Pixy.h>
#include <Servo.h>

#define txPin 14

Pixy pixy;
Servo arm_servo;

//====================================================================================================================
//   Variables
//=====================================================================================================================


//****Color Sensor Variables *****
//current
int currColor;
 int assignedColor;

int currentQuadrant;
const int YELLOW = 1;
const int ORANGE = 2;
const int GREEN = 3;
const int RED = 4;
const int GREY = 5;

//Return assignedColor for front and back sensors
int frontColor;
int backColor;

// Central Hue Value for each Color
int redH = 8; //0 - 10
int greenH = 120; //95 -115
int yellowH = 47;//39-49
int orangeH = 25;//19-29
//int greyH = 35; //30-40





//****Motor Variables *****
const int SWITCH_PORT = 51;
const int rightMotor = 12;
const int leftMotor = 13;

const int rightBrake = 9;
const int leftBrake = 8;

const int rightSpeed = 3;
const int leftSpeed = 11;

int LEFT_MOTOR_VAL = 0;
int RIGHT_MOTOR_VAL = 0;
float kmod;
float K;

float BASE_SPEED = 70;



int STATE;
const int STOP = 1;
const int GO = 0;


//****IR Variables *****
int IR = 50;
int ValIR;

//****LCD Variables *****
SoftwareSerial LCD = SoftwareSerial(0, txPin);
const int LCDdelay = 10;

int hue_f;
int hue_b;

float sat_f;
float sat_b;

//****Pixy Variables *****
static int i = 0;
int j;
uint16_t blocks;
char buf[32];
int k;
bool egg_found = false;
int targetedEgg;

//****Servo Variables *****
bool arm_down = false;

//================================================================================================
//   Setup
//================================================================================================

void setup() {

  Serial.begin(9600);
  Serial.println("--Serial port started--");
  pinMode(SWITCH_PORT, INPUT_PULLUP);

  //Channel A- Right
  pinMode(rightMotor, OUTPUT);  //Initiates Motor
  pinMode(rightBrake, OUTPUT);   //Initiates Brake

  //Channel B-Left
  pinMode(leftMotor, OUTPUT);  //Initiates Motor
  pinMode(leftBrake, OUTPUT);   //Initiates Brake

  pinMode(IR, INPUT); //Initiate Right Sensor
  //pinMode(leftIR, INPUT);  //Initiate Left Sensor

  //setupColorSensor();
  setupLCD();
  
  pixy.init();

}

//================================================================================================
//   LOOP Function
//================================================================================================
void loop() {

  if (digitalRead(SWITCH_PORT)) {

  
 

    // If Assigned Quadrant Color has not been detected
    if ((assignedColor == NULL) || (assignedColor == GREY)) {
      
      // Store Assigned Color
      getAssignedColor();

      // Once Assigned Color is stored, find egg of that color
    } else  {

      if (egg_found == false) {
        getEgg();

      } else {
        eggFoundSignal();
        
        }
    }
    // update motor speed once per loop.
    motorControl();

  } else {

    //stop
    LEFT_MOTOR_VAL = 0;
    RIGHT_MOTOR_VAL = 0;
    motorControl();
  }
  
}





//================================================================================================
//   Motion Functions
//================================================================================================

void motorControl() {
  int left_speed = LEFT_MOTOR_VAL;
  int right_speed = RIGHT_MOTOR_VAL;

  if (left_speed == 0) {
    //Engage Brakes
    digitalWrite(leftBrake, HIGH);//Left Brake
  }
  else {
    //Disengage Brakes
    digitalWrite(leftBrake, LOW);//Left Brake
  }
  if (right_speed == 0) {
    //Engage Brakes
    digitalWrite(rightBrake, HIGH);//Right Brake
  }
  else {
    //Disengage Brakes
    digitalWrite(rightBrake, LOW);//Right Brake
  }
  if (left_speed < 0) {
    digitalWrite (leftMotor, HIGH);//Left Wheel turns backwards

  } else {
    digitalWrite (leftMotor, LOW);//Left Wheel turns forward
  }
  if (right_speed < 0) {
    digitalWrite (rightMotor, LOW);//Right Wheel turns backwards

  } else {
    digitalWrite (rightMotor, HIGH);//Right Wheel turns forward
  }

  analogWrite(rightSpeed, abs(right_speed));
  analogWrite(leftSpeed, abs(left_speed));

}


//===============================================================================
//   Servo Functions
//================================================================================

//void armDown() {
//  arm_servo.write(10);
//  arm_down = true;
//
//}
//
//void armUp() {
//  arm_down = false;
//  arm_servo.write(70);
//}
//
//void setupServo() {
//
//  arm_servo.attach(45);
//  arm_servo.write(70);
//
//}


void dropEgg() {

  
//  LEFT_MOTOR_VAL = BASE_SPEED;
//  RIGHT_MOTOR_VAL = BASE_SPEED;
//  delay(1000);
//  motorControl();

  LEFT_MOTOR_VAL = 0;
  RIGHT_MOTOR_VAL = 0;
  motorControl();
 // armUp();

}
//================================================================================================
//   Pixy Functions
//================================================================================================

void getEgg() {

  blocks = pixy.getBlocks();
  if (blocks) {

    //for all detected blocks of objects in pixy's range of vision
    for (k = 0; k < blocks; k++) {

      // If a block matches matches Assigned Color, follow it
      if (pixy.blocks[k].signature == assignedColor) {
         Serial.println("Egg found");
        //we assume block k is an egg
        //if ((pixy.blocks[k].width >= 90) && (pixy.blocks[k].width <= 150)) {

        targetedEgg = k;
        
        
       
        
      
        int x_position = pixy.blocks[targetedEgg].x - 160;
        //if width 120, then kmod --> 1
        //if width is small, then kmod --> 0 
        //kmod = 7 / pixy.blocks[targetedEgg].width;

        K = 0.7; 

        //If x_position < 0, turn left (right motor goes faster)
        //If x_position > 0, turn right (left motor goes faster)
        LEFT_MOTOR_VAL = (BASE_SPEED) + (x_position * K);
        RIGHT_MOTOR_VAL = (BASE_SPEED) - (x_position * K);
        
        //if egg is found egg_found is set to true
        egg_found = true;
        break;

       //closes matching width
        //}

        //closes IF a block matches matches Assigned Color clause
      }
     
      //closes for (each block found) loop
    }
    
    //closes if (blocks) clause
  }



  //if egg is not found, egg_found's default value is false
  if (!egg_found) {
    // No matching Egg was found so turn left slightly
    //clearLCD();
    LEFT_MOTOR_VAL = BASE_SPEED ;
    RIGHT_MOTOR_VAL = BASE_SPEED + BASE_SPEED / 2;
    motorControl();

  }

  motorControl(); // update motor speed once per loop.
}



void eggFoundSignal() {
  
  clearLCD();
  //printAssignedColor();
  lcdPosition(1, 1);
  LCD.print("Egg found");
}

//================================================================================================
//   IR Sensor Functions
//================================================================================================
void boundarySetup() {

  //Read value from IR Sensors and print in Serial Window
  ValIR = digitalRead(IR);

  //If light surface detected, STATE is STOP
  if (ValIR == 1) {
    Serial.println(ValIR);
    STATE = STOP;
  }
  //If dark surface detected, STATE is GO
  else {

    Serial.println(ValIR);
    STATE = GO;
  }
}

void detectBoundary() {

  //STATE is STOP
  if (STATE == STOP) {
    //Back up
    LEFT_MOTOR_VAL = -BASE_SPEED;
    RIGHT_MOTOR_VAL = -BASE_SPEED;
    motorControl();
    delay(1000);

    //Turn around
    LEFT_MOTOR_VAL = - BASE_SPEED;
    RIGHT_MOTOR_VAL = BASE_SPEED;
    motorControl();
    delay(1000);
  }
}

//================================================================================================
//   RGB Color Sensor Setup
//================================================================================================

#define maxrgb 65535
// You can use any digital pin for emulate SDA / SCL
#define SDApinON_front 32
#define SCLpinON_front 33

#define SDApinON_back 30
#define SCLpinON_back 31

#define SDApinSS 6
#define SCLpinSS 7

// Implementing 2 RGB Sensors
Adafruit_TCS34725softi2c tcsON_back = Adafruit_TCS34725softi2c(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X, SDApinON_back, SCLpinON_back);
Adafruit_TCS34725softi2c tcsON_front = Adafruit_TCS34725softi2c(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X, SDApinON_front, SCLpinON_front);


#define commonAnode true

// our RGB -> eye-recognized gamma color
byte gammatable[256];

float h, s, v;

void setupColorSensor() {
  Serial.println("Color View Test!");

  if (tcsON_front.begin() && tcsON_back.begin()) {
    Serial.println("Found two sensors");
  } else {
    Serial.println("No TCS34725 found ... check your connections");
    while (1); // halt!
  }

  for (int i = 0; i < 256; i++) {
    float x = i;
    x /= 255;
    x = pow(x, 2.5);
    x *= 255;

    if (commonAnode) {
      gammatable[i] = 255 - x;
    } else {
      gammatable[i] = x;
    }
    //Serial.println(gammatable[i]);
  }
}

void getHueAndSat() {

  uint16_t clear, redON, greenON, blueON;
  uint16_t redSS, greenSS, blueSS;
  gatherTCS(tcsON_front, &clear, &redON, &greenON, &blueON);
  hue_f = h;
  sat_f = s;
  Serial.print("Front Hue\t");
  Serial.print(hue_f);
  Serial.print("\tFront Sat\t");
  Serial.print(sat_f);
  Serial.print("\n");

  gatherTCS(tcsON_back, &clear, &redON, &greenON, &blueON);
  hue_b = h;
  sat_b = s;
  Serial.print("Back Hue\t");
  Serial.print(hue_b);
  Serial.print("\tBack Sat\t");
  Serial.print(sat_b);
  Serial.print("\n");
}


// Calculates hue, saturation and value from RGB
void RGBtoHSV( float r, float g, float b)
{
  float min_rgb;
  float max_rgb;
  double delta;
  min_rgb = min(min(r, g), b);
  max_rgb = max(max(r, g), b);
  v = max_rgb;        // v
  delta = max_rgb - min_rgb;
  //  Serial.print("min_rgb: ");
  //  Serial.print(min_rgb);
  //  Serial.print(" max_rgb: ");
  //  Serial.println(max_rgb);
  //  Serial.print(" delta: ");
  //  Serial.println(delta);

  if ( max_rgb != 0.0 )
    s = delta / max_rgb;    // s
  else {
    // r = g = b = 0    // s = 0, v is undefined
    s = 0;
    h = -1;
    return;
  }
  if ( r == max_rgb ) {
    h = ( g - b ) / delta;    // between yellow & magenta
  }
  else if ( g == max_rgb ) {
    h = 2 + ( b - r ) / delta;  // between cyan & yellow
  }
  else {
    h = 4 + ( r - g ) / delta;  // between magenta & cyan
  }
  h *= 60;        // degrees
  if ( h < 0 )
    h += 360;
}


//gather information from the color sensor
//RGBtoHSV() function is called inside this function
void gatherTCS(Adafruit_TCS34725softi2c tcs, uint16_t clear, uint16_t red, uint16_t green, uint16_t blue) {

  tcs.setInterrupt(false);      // turn on LED

  delay(60);  // takes 50ms to read

  tcs.getRawData(&red, &green, &blue, &clear);

  tcs.setInterrupt(true);  // turn off LED

  // Figure out some basic hex code for visualization
  uint32_t sum = clear;
  float r, g, b;
  r = red; r /= maxrgb;
  g = green; g /= maxrgb;
  b = blue; b /= maxrgb;
  r *= 256; g *= 256; b *= 256;

  RGBtoHSV(r, g, b);
  //  Serial.print("hue = "); Serial.print((int)h);
  //    Serial.print(" saturation = "); Serial.print((float)s);
  //    Serial.print(" value = "); Serial.println((float)v);

  getHue((int)h);
  //Serial.print("\n");
  getSat((float)s);
  //Serial.print("\n");
  //Serial.print(",");
  //Serial.println((float)v);

}


//================================================================================================
//   RGB Color Sensor Functions
//================================================================================================

int getHue(int h) {
  return h;
}

float getSat(float s) {
  return s;
}

int getCurrentColor(int hue, float sat) {

  //Find difference between hue reading and median hue value
  // for each color
  int diffR = abs(redH - hue);
  int diffO = abs(orangeH - hue);
  int diffY = abs(yellowH - hue);
  int diffG = abs(greenH - hue);

  //Find smallest of these differences
  int minDiff = min(diffR, min(diffO , min (diffY, diffG)));

  //if the smallest difference is equal to the difference between the hue reading and the median hue value for that color
  //the sensor is currently at that particular color
  if (minDiff == diffR && sat >= 0.35) {
    Serial.println(" red");
    currColor = RED;

  } else if (minDiff == diffO && sat >= 0.35) {
    Serial.println(" orange");
    currColor = ORANGE;

  } else if (minDiff == diffY && sat >= 0.35) {
    Serial.println(" yellow");
    currColor = YELLOW;


  } else if (minDiff == diffG && sat >= 0.35) {
    Serial.println(" green");
    currColor = GREEN;

  } else if (sat < 0.35) {
    Serial.println(" grey");
    currColor = GREY;

  }
  return currColor;
}

void getAssignedColor() {

  getHueAndSat();
  frontColor = getCurrentColor(hue_f, sat_f);
  backColor =  getCurrentColor(hue_b, sat_b);

  if (frontColor && backColor == GREY) {

    //Move Forward at base speed
    LEFT_MOTOR_VAL = BASE_SPEED;
    RIGHT_MOTOR_VAL = BASE_SPEED;
    motorControl();


  } else if ((frontColor != GREY && backColor == GREY) || (frontColor != GREY && backColor == NULL)) {
    //Move Forward at base speed
    LEFT_MOTOR_VAL = BASE_SPEED;
    RIGHT_MOTOR_VAL = BASE_SPEED;
    motorControl();
    delay(100);

    //Stop and Take Reading
    LEFT_MOTOR_VAL = 0;
    RIGHT_MOTOR_VAL = 0;
    motorControl();
    delay(500);
    //    getAssignedColor();
  }

  //two cases
  //robot overshoots boundary - if front sensor detects grey and the back sensor is at a colored boundary
  //front sensor is at the tiny area between the two boundaries, front sensor will return NULL and the back sensor is at a colored boundary
  else if ((frontColor == GREY && backColor != GREY) || (frontColor == NULL && backColor != GREY)) {

    //Back up
    LEFT_MOTOR_VAL = -BASE_SPEED;
    RIGHT_MOTOR_VAL = -BASE_SPEED;
    motorControl();
    delay(1000);// or 100

    //Stop and Take Reading
    LEFT_MOTOR_VAL = 0;
    RIGHT_MOTOR_VAL = 0;
    motorControl();
    delay(500);
    // getAssignedColor();

    Serial.println(frontColor);
  }

  //if both color sensors detect a colored boundary
  else if (frontColor != GREY && backColor != GREY) {
    //Stop and Analyze Boundary
    LEFT_MOTOR_VAL = 0;
    RIGHT_MOTOR_VAL = 0;
    motorControl();
    colorVerification();
  }
  
  //on rare occasions in which both sensors return NULL values
  else {
   
    // Move Forward at a slower speed
    LEFT_MOTOR_VAL = BASE_SPEED / 2;
    RIGHT_MOTOR_VAL = BASE_SPEED / 2;
    motorControl();
    
    //call function recursively - not sure if this is redundant since the code gets called in the loop as
    //getAssignedColor();
  }

}




void colorVerification() {

  //check if front color is yellow and back color is red
  if  (frontColor == YELLOW && backColor == RED) {
    assignedColor = RED;
     clearLCD();
    lcdPosition(0, 1);
    LCD.print("Home: Red");


  } else if  (frontColor == GREEN && backColor == RED) {
    assignedColor = RED;
     clearLCD();
    lcdPosition(0, 1);
    LCD.print("Home: Red");
  


  } else if  (frontColor == ORANGE && backColor == YELLOW) {
    assignedColor = YELLOW;
      clearLCD();
    lcdPosition(0, 1);
    LCD.print("Home: Yellow");
    

  } else if  (frontColor == RED && backColor == YELLOW) {
    assignedColor = YELLOW;
    clearLCD();
    lcdPosition(0, 1);
    LCD.print("Home: Yellow");



  } else if   (frontColor == ORANGE && backColor == GREEN) {
    assignedColor = GREEN;
     clearLCD();
    lcdPosition(0, 1);
    LCD.print("Home: Green");



  } else if  (frontColor == RED && backColor == GREEN) {
    assignedColor = GREEN;
     clearLCD();
    lcdPosition(0, 1);
    LCD.print("Home: Green");


  } else if  (frontColor == YELLOW && backColor == ORANGE) {
    assignedColor = ORANGE;
     clearLCD();
    lcdPosition(0, 1);
    LCD.print("Home: Orange");


  } else if   (frontColor == GREEN && backColor == ORANGE) {
    assignedColor = ORANGE;
    clearLCD();
    lcdPosition(0, 1);
    LCD.print("Home: Orange");





  } else {
    //if robot is at an unlikely location (eg middle of the arena where front green and back is yellow)
    //robot should back up
    LEFT_MOTOR_VAL = -70;
    RIGHT_MOTOR_VAL = -70;
    motorControl();
    delay(1500);
    getAssignedColor();
  }
}


void getCurrentQuadrant() {

  //check if front color is yellow and back color is red
  if  (frontColor == YELLOW && backColor == RED) {
    currentQuadrant = YELLOW;
    Serial.println("curr Color: \t");
    Serial.println("Yellow");
    
    clearLCD();
   
    lcdPosition(1, 1);
    LCD.print("I'm in Yellow");


  } else if  (frontColor == GREEN && backColor == RED) {
    currentQuadrant = GREEN;
    Serial.println("curr Color: \t");
    Serial.print("Green");

    clearLCD();
    
    lcdPosition(1, 1);
    LCD.print("I'm in Green");


  } else if  (frontColor == ORANGE && backColor == YELLOW) {
    currentQuadrant = ORANGE;
    Serial.println("curr Color: \t");
    Serial.print("Orange");
    
    clearLCD();
   
    lcdPosition(1, 1);
    LCD.print("I'm in Orange");


  } else if  (frontColor == RED && backColor == YELLOW) {
    currentQuadrant = RED;
    Serial.println("curr Color: \t");
    Serial.print("Red");
    
    clearLCD();
    
    lcdPosition(1, 1);
    LCD.print("I'm in Red");


  } else if   (frontColor == ORANGE && backColor == GREEN) {
    currentQuadrant = ORANGE;
    Serial.println("curr Color: \t");
    Serial.print("Orange");
    
    clearLCD();
    lcdPosition(1, 1);
    LCD.print("I'm in Orange");


  } else if  (frontColor == RED && backColor == GREEN) {
    currentQuadrant = RED;
    Serial.println("curr Color: \t");
    Serial.print("Red");
    
    clearLCD();
    lcdPosition(1, 1);
    LCD.print("I'm in Red");

  } else if  (frontColor == YELLOW && backColor == ORANGE) {
    currentQuadrant = YELLOW;
    Serial.println("curr Color: \t");
    Serial.print("Yellow");
    
    clearLCD();
    lcdPosition(1, 1);
    LCD.print("I'm in Yellow");


  } else if   (frontColor == GREEN && backColor == ORANGE) {
    currentQuadrant = GREEN;
    Serial.println("curr Color: \t");
    Serial.print("Green");
    
    clearLCD();
    lcdPosition(1, 1);
    LCD.print("I'm in Green");

  } else {
    //if robot is at an unlikely location (eg middle of the arena where front green and back is yellow)
    //robot should back up
    LEFT_MOTOR_VAL = -70;
    RIGHT_MOTOR_VAL = -70;
    motorControl();
    delay(1500);

  }
}


void goHome() {


  LEFT_MOTOR_VAL = BASE_SPEED;
  RIGHT_MOTOR_VAL = BASE_SPEED / 2 + BASE_SPEED;
  motorControl();
  
  if (currentQuadrant == assignedColor) {
    Serial.println("I'm home");
    dropEgg();

  }

}
//================================================================================================
//   LCD Functions
//================================================================================================

// Place cursor to specific row and column
//    (top row = 0, bottom row = 1)
void lcdPosition(int row, int col) {
  LCD.write(0xFE);   //command flag
  LCD.write((col + row * 64 + 128));  //position
  delay(LCDdelay);
}
void clearLCD() {
  LCD.write(0xFE);   //command flag
  LCD.write(0x01);   //clear command.
  delay(LCDdelay);
}
void backlightOn() {  //turns on the backlight
  LCD.write(0x7C);   //command flag for backlight stuff
  LCD.write(157);    //light level.
  delay(LCDdelay);
}
void backlightOff() { //turns off the backlight
  LCD.write(0x7C);   //command flag for backlight stuff
  LCD.write(128);     //light level for off.
  delay(LCDdelay);
}
void serCommand() {  //a general function to call the command flag for issuing all other commands
  LCD.write(0xFE);
}
void setupLCD()
{
  pinMode(txPin, OUTPUT);
  LCD.begin(9600);
  clearLCD();
  lcdPosition(0, 3);
  LCD.print("Black Lives");
  lcdPosition(1, 5);
  LCD.print("Matter");
}
